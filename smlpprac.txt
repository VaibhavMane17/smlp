1. Linear Regression
CODE:
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
summary(relation)
plot(x,y,col="blue",main = "Income and happiness  regression",
     abline(relation),xlab = "INCOME",ylab = "HAPPINESS",cex=1.3,pch=16)

################################################################################

2. Regression and prediction
CODE:
x =c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y = c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
a = data.frame(x = 170)
result= predict(relation,a)  #predict(model,new_data)
print(result)

#######################################################################################

3. Assignment Problem
CODE:
library(lpSolve)
library(RcppHungarian)

num=readline("Enter no. of rows ")
rows=as.numeric(num)
cat("enter values row wise")
a=scan(nmax= rows^2)
cost.mat=matrix(a,nrow=rows,byrow = TRUE)
cost.mat
print("For Minimization type 1 ")
print("For Maximization type 2 ")
prob=readline()
prob
if (prob == "1"){
  ans=HungarianSolver(cost.mat)
  print("Assignment")
  print(ans$pairs)
  print("Cost")
  print(ans$cost)
}else if (prob == "2"){
  ans=lp.assign(cost.mat,direction = "max")
  print("Assignment")
  print(ans$solution)
  print("Cost")
  print(ans$objval)
}else{
  cat("Choose a valid option")
  break
}

############################################################################

4. Least square method
CODE: 
library(dplyr)
library(crayon)
cat(red("Enter number of observations\n"))
num=scan(nmax = 1)
cat(red("Enter X observations\n"))
year=scan(nmax = num)
cat(red("Enter Y observations\n"))
y=scan(nmax = num)
cat(red("Enter year for prediction\n"))
pred=scan(nmax = 1)
mean_year=mean(year)
data1=data.frame("Year"=year,"Y"=y)
cat(red("Type 1 for Straight Line\n"))
cat(red("Type 2 for Parabola\n"))
cat(red("Type 3 for Exponential\n"))
choice=readline()
if (choice == "1"){
  data1=mutate(data1,"X"=Year-mean_year,"X2"=X^2,"XY"=X*Y)
  sum_Y=sum(data1$Y)
  a=sum_Y/num
  sum_XY=sum(data1$XY)
  sum_X2=sum(data1$X2)
  b=sum_XY/sum_X2
  cat(red("Trend Equation is Y=",a,"+",b,"X\n"))
  prediction=a+(b*(pred-mean_year))
  cat(red("Prediction for",pred,"is",prediction,"\n")
}else if (choice == "2"){
  data1=mutate(data1,"X"=Year-mean_year,"X2"=X^2,"X3"=X^3,"X4"=X^4,"XY"=X*Y,"X2Y"=X2*Y)
  sum_Y=sum(data1$Y)
  sum_X2=sum(data1$X2)
  sum_XY=sum(data1$XY)
  b=sum_XY/sum_X2
  sum_X2Y=sum(data1$X2Y)
  sum_X4=sum(data1$X4)
  numerator=(num*sum_X2Y)-(sum_X2)*(sum_Y) 
  denom=(num*sum_X4)-(sum_X2*sum_X2) 
  c=numerator/denom
  numerator1=sum_Y-(c*sum_X2)
  a=numerator1/num
  cat(red("Trend Equation is Y=",a,"*",b,"^X+",c,"X2\n"))
  var=pred-mean_year
  prediction=(a+(b*var)+(c*(var^2)))
  cat(red("Prediction for",pred,"is",prediction,"\n"))
}else if (choice == "3"){
  data1=mutate(data1,"X"=Year-mean_year,"X2"=X^2,"log(Y)"=round(log(Y,base = 10),digits = 4),"Xlog(Y)"=X*`log(Y)`)
  sum_logY=sum(data1$`log(Y)`)
  log_a=sum_logY/num
  sum_XlogY=sum(data1$`Xlog(Y)`)
  sum_X2=sum(data1$X2)
  log_b=sum_XlogY/sum_X2
  a=10^log_a
  b=10^log_b
  cat(red("Trend Equation is Y=",a,"*",b,"^X\n"))
  prediction=a*(b^(pred-mean_year))
  cat(red("Prediction for",pred,"is",prediction,"\n"))
}else {
  cat("Choose a valid option")}

##############################################################################################################################

5. CPM
CODE:
library(criticalpath)
library(crayon)

abc=Schedule$new()
# Second, add activities to it(ID,Name,Activity)
abc$add_act_rel(1,"a",3,c(2))
abc$add_act_rel(2,"b",5,c(3,4))
abc$add_act_rel(3,"c",4,c(5))
abc$add_act_rel(4,"d",8,c(5))
abc$add_act_rel(5,"e",6,c(6))
abc$add_act_rel(6,"f",0)

cat(red("Project Duration:\n"))
duration=abc$duration
duration

critical=c(abc$activities$critical)
cat(red("Critical Path:\n"))
which(critical)

################################################################################################

6. Classification 
CODE:

#CLASSIFICATION
library(e1071) #naive bayes
library(caTools) #sample.split
library(caret)  #confusion matrix

data("iris")
View(iris)

split=sample.split(iris$Species,SplitRatio = 0.7) 
split
train_cf=subset(iris,split=="TRUE") 
test_cf=subset(iris,split=="FALSE")
NBClassifier=naiveBayes(Species~.,data = train_cf) 
NBClassifier

pred=predict(NBClassifier,newdata = test_cf)
pred

confusion_table=table(test_cf$Species,pred)
confusion_table

#######################################################################################################

7. LPP
CODE:

library(lpSolve)
library(crayon)

cat(red("Number of variables"))
num_obj= scan(nmax = 1)
cat(red("Enter coeffients of objective function"))
f.obj = scan(nmax = num_obj)
cat(red("Number of constraints"))
num_cons= scan(nmax = 1)
cat(red("Enter coeffients of constraints"))
abc=scan(nmax = num_cons*num_obj)
f.con <- matrix(abc, nrow = num_cons, byrow = TRUE)

cat(red("Enter inequalities of constraints"))
f.dir = scan(what = "" ,nmax = num_cons) 

cat(red("Enter RHS of constraints"))
f.rhs = scan(nmax = num_cons)

cat(red("Type 1 for Maximization"))
cat(red("Type 2 for Minimization"))
choice=readline()

if (choice=="1"){
  ans=lp("max", f.obj, f.con, f.dir, f.rhs)
  print(ans)
  cat(red("Values of x and y are",ans$solution))
}else if (choice =="2"){
  ans=lp("min", f.obj, f.con, f.dir, f.rhs)
  print(ans)
  cat(red("Values of x and y are",ans$solution))
}else{
  cat(red("Choose a valid option"))}

############################################################

8. Transportation Problem
CODE:
library(lpSolve)
r=as.numeric(readline("Enter no. of factories "))
c=as.numeric(readline("Enter no. of warehouses "))
cat("Write Entries")
x=scan(nmax = r*c)
costs = matrix(x, nrow = r ,byrow = TRUE)
row.signs = rep("<=", r) #not to exceed
cat("Enter supply values")
row.rhs = scan(nmax = r) #supply
col.signs = rep(">=", c) #satisfy all
cat("Enter demand values")
col.rhs = scan(nmax = c) #demand
lptrans <- lp.transport(costs, "min", row.signs, row.rhs, col.signs, col.rhs)
lptrans$solution
cat("Transportation Cost:")
cat(lptrans$objval)



